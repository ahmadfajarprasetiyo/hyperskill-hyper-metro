type: edu
files:
  - name: src/metro/Main.java
    visible: true
    text: |
      package metro;
      
      public class Main {
          public static void main(String[] args) {
              System.out.println("Hello, world!");
          }
      }
    learner_created: false
  - name: test/baltimore.json
    visible: false
    text: |-
      {
        "SubwayLink": {
          "1": {
            "name": "Owings Mills",
            "transfer": [],
            "time": 2
          },
          "2": {
            "name": "Old Court",
            "transfer": [],
            "time": 4
          },
          "3": {
            "name": "Milford Mill",
            "transfer": [],
            "time": 6
          },
          "4": {
            "name": "Reiserstown Plaza",
            "transfer": [],
            "time": 3
          },
          "5": {
            "name": "Rogers Avenue",
            "transfer": [],
            "time": 2
          },
          "6": {
            "name": "West Cold Spring",
            "transfer": [],
            "time": 6
          },
          "7": {
            "name": "Mondawmin",
            "transfer": [],
            "time": 4
          },
          "8": {
            "name": "Penn North",
            "transfer": [],
            "time": 5
          },
          "9": {
            "name": "Uptown",
            "transfer": [],
            "time": 7
          },
          "10": {
            "name": "State Center",
            "transfer": [],
            "time": 3
          },
          "11": {
            "name": "Lexington Market",
            "transfer": [],
            "time": 5
          },
          "12": {
            "name": "Charles Center",
            "transfer": [],
            "time": 6
          },
          "13": {
            "name": "Shot Tower/Market Place",
            "transfer": [],
            "time": 4
          },
          "14": {
            "name": "Johns Hopkins Hospital",
            "transfer": [], "time": null
          }
        }
      }
    learner_created: false
  - name: test/lausanne.json
    visible: false
    text: |-
      {
        "m1": {
          "1": {
            "name": "Renes—Gare",
            "transfer": []
          },
          "2": {
            "name": "Epenex",
            "transfer": []
          },
          "3": {
            "name": "Crochy",
            "transfer": []
          },
          "4": {
            "name": "Cerisaie",
            "transfer": []
          },
          "5": {
            "name": "Bassenges",
            "transfer": []
          },
          "6": {
            "name": "EPFL",
            "transfer": []
          },
          "7": {
            "name": "UNL—Sorge",
            "transfer": []
          },
          "8": {
            "name": "Mouline",
            "transfer": []
          },
          "9": {
            "name": "UNL—Chemberonne",
            "transfer": []
          },
          "10": {
            "name": "Bourdonnette",
            "transfer": []
          },
          "11": {
            "name": "Melley",
            "transfer": []
          },
          "12": {
            "name": "Provence",
            "transfer": []
          },
          "13": {
            "name": "Montelly",
            "transfer": []
          },
          "14": {
            "name": "Vigie",
            "transfer": []
          },
          "15": {
            "name": "Lausanne—Flon",
            "transfer": []
          }
        },
        "m2": {
          "1": {
            "name": "Croisettes",
            "transfer": []
          },
          "2": {
            "name": "Vennes",
            "transfer": []
          },
          "3": {
            "name": "Fourmi",
            "transfer": []
          },
          "4": {
            "name": "Sallaz",
            "transfer": []
          },
          "5": {
            "name": "CHUV",
            "transfer": []
          },
          "6": {
            "name": "Ours",
            "transfer": []
          },
          "7": {
            "name": "Riponne M.Bejart",
            "transfer": []
          },
          "8": {
            "name": "Bessieres",
            "transfer": []
          },
          "9": {
            "name": "Lausanne—Flon",
            "transfer": []
          },
          "10": {
            "name": "Lausanne Gare CFF",
            "transfer": []
          },
          "11": {
            "name": "Grancy",
            "transfer": []
          },
          "12": {
            "name": "Delices",
            "transfer": []
          },
          "13": {
            "name": "Jourdils",
            "transfer": []
          },
          "14": {
            "name": "Ouchy—Olympique",
            "transfer": []
          }
        }
      }
    learner_created: false
  - name: test/prague.json
    visible: false
    text: |-
      {
        "Linka A": {
          "1": {
            "name": "Nemocnice Motol" ,
            "transfer": []
          } ,
          "2": {
            "name": "Petriny" ,
            "transfer": []
          } ,
          "3": {
            "name": "Nadrazi Veleslavin" ,
            "transfer": []
          } ,
          "4": {
            "name": "Borislavka" ,
            "transfer": []
          } ,
          "5": {
            "name": "Dejvicka" ,
            "transfer": []
          } ,
          "6": {
            "name": "Hradcanska" ,
            "transfer": []
          } ,
          "7": {
            "name": "Malostranska" ,
            "transfer": []
          } ,
          "8": {
            "name": "Staromestska" ,
            "transfer": []
          } ,
          "9": {
            "name": "Mustek" ,
            "transfer": [
              {
                "line": "Linka B" ,
                "station": "Mustek"
              }
            ]
          } ,
          "10": {
            "name": "Muzeum" ,
            "transfer": [
              {
                "line": "Linka C" ,
                "station": "Muzeum"
              }
            ]
          } ,
          "11": {
            "name": "Namesti Miru" ,
            "transfer": []
          } ,
          "12": {
            "name": "Jiriho z Podebrad" ,
            "transfer": []
          } ,
          "13": {
            "name": "Flora" ,
            "transfer": []
          } ,
          "14": {
            "name": "Zelivskeho" ,
            "transfer": []
          } ,
          "15": {
            "name": "Strasnicka" ,
            "transfer": []
          } ,
          "16": {
            "name": "Skalka" ,
            "transfer": []
          } ,
          "17": {
            "name": "Depo Hostivar" ,
            "transfer": []
          }
        } ,
        "Linka B": {
          "1": {
            "name": "Cerny Most" ,
            "transfer": []
          } ,
          "2": {
            "name": "Rajska zahrada" ,
            "transfer": []
          } ,
          "3": {
            "name": "Hloubetin" ,
            "transfer": []
          } ,
          "4": {
            "name": "Kolbenova" ,
            "transfer": []
          } ,
          "5": {
            "name": "Vysocanska" ,
            "transfer": []
          } ,
          "6": {
            "name": "Ceskomoravska" ,
            "transfer": []
          } ,
          "7": {
            "name": "Palmovka" ,
            "transfer": []
          } ,
          "8": {
            "name": "Invalidovna" ,
            "transfer": []
          } ,
          "9": {
            "name": "Krizikova" ,
            "transfer": []
          } ,
          "10": {
            "name": "Florenc" ,
            "transfer": [
              {
                "line": "Linka C" ,
                "station": "Florenc"
              }
            ]
          } ,
          "11": {
            "name": "Namesti Republiky" ,
            "transfer": []
          } ,
          "12": {
            "name": "Mustek" ,
            "transfer": [
              {
                "line": "Linka A" ,
                "station": "Mustek"
              }
            ]
          } ,
          "13": {
            "name": "Narodni trida" ,
            "transfer": []
          } ,
          "14": {
            "name": "Karlovo namesti" ,
            "transfer": []
          } ,
          "15": {
            "name": "Andel" ,
            "transfer": []
          } ,
          "16": {
            "name": "Smichovske nadrazi" ,
            "transfer": []
          } ,
          "17": {
            "name": "Radlicka" ,
            "transfer": []
          } ,
          "18": {
            "name": "Jinonice" ,
            "transfer": []
          } ,
          "19": {
            "name": "Nove Butovice" ,
            "transfer": []
          } ,
          "20": {
            "name": "Hurka" ,
            "transfer": []
          } ,
          "21": {
            "name": "Luziny" ,
            "transfer": []
          } ,
          "22": {
            "name": "Luka" ,
            "transfer": []
          } ,
          "23": {
            "name": "Stodulky" ,
            "transfer": []
          } ,
          "24": {
            "name": "Zlicin" ,
            "transfer": []
          }
        } ,
        "Linka C": {
          "1": {
            "name": "Letnany" ,
            "transfer": []
          } ,
          "2": {
            "name": "Prosek" ,
            "transfer": []
          } ,
          "3": {
            "name": "Strizkov" ,
            "transfer": []
          } ,
          "4": {
            "name": "Ladvi" ,
            "transfer": []
          } ,
          "5": {
            "name": "Kobylisy" ,
            "transfer": []
          } ,
          "6": {
            "name": "Nadrazi Holesovice" ,
            "transfer": []
          } ,
          "7": {
            "name": "Vltavska" ,
            "transfer": []
          } ,
          "8": {
            "name": "Florenc" ,
            "transfer": [
              {
                "line": "Linka B" ,
                "station": "Florenc"
              }
            ]
          } ,
          "9": {
            "name": "Hlavni nadrazi" ,
            "transfer": []
          } ,
          "10": {
            "name": "Muzeum" ,
            "transfer": [
              {
                "line": "Linka A" ,
                "station": "Muzeum"
              }
            ]
          } ,
          "11": {
            "name": "I.P.Pavlova" ,
            "transfer": []
          } ,
          "12": {
            "name": "Vysehrad" ,
            "transfer": []
          } ,
          "13": {
            "name": "Prazskeho povstani" ,
            "transfer": []
          } ,
          "14": {
            "name": "Pankrac" ,
            "transfer": []
          } ,
          "15": {
            "name": "Budejovicka" ,
            "transfer": []
          } ,
          "16": {
            "name": "Kacerov" ,
            "transfer": []
          } ,
          "17": {
            "name": "Roztyly" ,
            "transfer": []
          } ,
          "18": {
            "name": "Chodov" ,
            "transfer": []
          } ,
          "19": {
            "name": "Opatov" ,
            "transfer": []
          } ,
          "20": {
            "name": "Haje" ,
            "transfer": []
          }
        }
      }
    learner_created: false
  - name: test/Tests.java
    visible: false
    text: |-
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.util.Arrays;
      
      public class Tests extends StageTest<String> {
          // test from the previous stage with one line
          @DynamicTest(order = 1)
          CheckResult oneLineTest() {
      
              TestedProgram main = new TestedProgram();
              main.start("./test/baltimore.json");
              String output = main.execute("/output \"SubwayLink\"").trim();
      
              String[] stations = new String[]{"Owings Mills", "Old Court", "Milford Mill", "Reiserstown Plaza",
                  "Rogers Avenue", "West Cold Spring", "Mondawmin", "Penn North", "Uptown", "State Center",
                  "Lexington Market", "Charles Center", "Shot Tower/Market Place", "Johns Hopkins Hospital"};
      
              checkDepots(output);
              checkOutputLength(output, stations.length + 2);
              assertStations(output, stations);
      
              return CheckResult.correct();
          }
      
          // test of example
          @DynamicTest(order = 2)
          CheckResult multipleLineOutputTest() {
      
              TestedProgram main = new TestedProgram();
              main.start("./test/lausanne.json");
              String output = main.execute("/output \"m1\"").trim();
      
              String[] stations = new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                  "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                  "Provence", "Montelly", "Vigie", "Lausanne—Flon"};
      
              checkDepots(output);
              checkOutputLength(output, stations.length + 2);
              assertStations(output, stations);
      
              output = main.execute("/output \"m2\"");
      
              stations = new String[]{"Croisettes", "Vennes", "Fourmi", "Sallaz", "CHUV", "Ours",
                  "Riponne M.Bejart", "Bessieres", "Lausanne—Flon", "Lausanne Gare CFF", "Grancy", "Delices", "Jourdils",
                  "Ouchy—Olympique"};
      
              checkDepots(output);
              checkOutputLength(output, stations.length + 2);
              assertStations(output, stations);
      
              return CheckResult.correct();
          }
      
          // example test pt.2 (with addition)
          @DynamicTest(order = 3)
          CheckResult additionTest() {
      
              TestedProgram main = new TestedProgram();
              main.start("./test/lausanne.json");
      
              // added a station to the end of the line
              main.execute("/append \"m1\" \"Test station 1\"");
              String output = main.execute("/output \"m1\"");
      
              String[] stations = new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                  "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                  "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1"};
      
              checkDepots(output);
              checkOutputLength(output, stations.length + 2);
              assertStations(output, stations);
      
              // added another one
              main.execute("/append \"m1\" \"Test station 2\"");
              output = main.execute("/output \"m1\"");
      
              stations = new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                  "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                  "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"};
      
              checkDepots(output);
              checkOutputLength(output, stations.length + 2);
              assertStations(output, stations);
      
              // added one station to the beginning of the line
              main.execute("/add-head \"m1\" \"Head\"");
              output = main.execute("/output \"m1\"");
      
              stations = new String[]{"Head", "Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                  "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                  "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"};
      
              checkDepots(output);
              checkOutputLength(output, stations.length + 2);
              assertStations(output, stations);
      
              return CheckResult.correct();
          }
      
          // not existing file check
          @DynamicTest(order = 4)
          CheckResult nonexistingFileTest() {
              TestedProgram main = new TestedProgram();
              String output = main.start("tHiS_fIlE_DoEs_nOt_ExIsT.txt");
              if (output.trim().length() == 0) {
                  return CheckResult.wrong("The program did not print anything when the file was not exist. ");
              }
              if (output.toLowerCase().startsWith("depot") || output.toLowerCase().endsWith("depot")) {
                  return CheckResult.wrong("It looks like the program did not print an error message when the file was not exist.");
              }
              return CheckResult.correct();
          }
      
          // test of a case from the example
          @DynamicTest(order = 5)
          CheckResult outputLineWithTransfer() {
              TestedProgram main = new TestedProgram();
              main.start("./test/prague.json");
      
              String[][] stations = new String[][]{
                  {"Nemocnice Motol", null},
                  {"Petriny", null},
                  {"Nadrazi Veleslavin", null},
                  {"Borislavka", null},
                  {"Dejvicka", null},
                  {"Hradcanska", null},
                  {"Malostranska", null},
                  {"Staromestska", null},
                  {"Mustek", "Linka B"},
                  {"Muzeum", "Linka C"},
                  {"Namesti Miru", null},
                  {"Jiriho z Podebrad", null},
                  {"Flora", null},
                  {"Zelivskeho", null},
                  {"Strasnicka", null},
                  {"Skalka", null},
                  {"Depo Hostivar", null}
              };
      
              String output = main.execute("/output \"Linka A\"");
              checkDepots(output);
      
              checkOutputLength(output, stations.length + 2);
              assertWithTransfer(output, stations);
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 6)
          CheckResult connectLinesTest() {
              TestedProgram main = new TestedProgram();
              main.start("./test/prague.json");
      
              String[][] stations = new String[][]{
                  {"Nemocnice Motol", null},
                  {"Petriny", "Linka C"},
                  {"Nadrazi Veleslavin", null},
                  {"Borislavka", null},
                  {"Dejvicka", null},
                  {"Hradcanska", null},
                  {"Malostranska", null},
                  {"Staromestska", null},
                  {"Mustek", "Linka B"},
                  {"Muzeum", "Linka C"},
                  {"Namesti Miru", null},
                  {"Jiriho z Podebrad", null},
                  {"Flora", null},
                  {"Zelivskeho", null},
                  {"Strasnicka", null},
                  {"Skalka", null},
                  {"Depo Hostivar", null}
              };
      
              main.execute("/connect \"Linka C\" \"I.P.Pavlova\" \"Linka A\" \"Petriny\"");
              String output = main.execute("/output \"Linka A\"");
      
              checkDepots(output);
              checkOutputLength(output, stations.length + 2);
              assertWithTransfer(output, stations);
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 7)
          CheckResult simpleRouteTest() {
              TestedProgram main = new TestedProgram();
              main.start("./test/prague.json");
      
              String[] correctRoute = {"Petriny", "Nadrazi Veleslavin", "Borislavka", "Dejvicka", "Hradcanska", "Malostranska",
                  "Staromestska", "Mustek", "Muzeum", "Namesti Miru", "Jiriho z Podebrad", "Flora"};
      
              String[] sOutput = main.execute("/route \"Linka A\" \"Petriny\" \"Linka A\" \"Flora\"").toLowerCase().split("\n");
      
              if (sOutput.length != correctRoute.length) {
                  return CheckResult.wrong("Your program printed an incorrect number of stations in the route.\n" +
                      "Expected: " + correctRoute.length + " stations." +
                      "\nYour output: " + sOutput.length + " stations.");
              }
      
              for (int i = 0; i < correctRoute.length; i++) {
                  if (i == 0 && !correctRoute[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                      return CheckResult.wrong("The first station in the output should be '" + correctRoute[i] + "'.");
                  } else if (i != 0) {
                      if (!correctRoute[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                          return CheckResult.wrong("After '" + correctRoute[i - 1] + "' should be '" + correctRoute[i] + "'.");
                      }
                  }
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 8)
          CheckResult advancedRouteTest() {
      
              TestedProgram main = new TestedProgram();
              main.start("./test/prague.json");
      
              String[] stations = {"Vysehrad", "I.P.Pavlova", "Muzeum",
                  "Transition to line Linka A", "Muzeum", "Mustek",
                  "Transition to line Linka B", "Mustek", "Namesti Republiky"};
              String[] sOutput = main.execute("/route \"Linka C\" \"Vysehrad\" \"Linka B\" \"Namesti Republiky\"").split("\n");
      
              if (sOutput.length != stations.length) {
                  return CheckResult.wrong("Your program printed an incorrect number of stations in the route.\n" +
                      "Expected: " + (stations.length - 4) + " stations and 2 transitions. Output should be " + stations.length + " lines." +
                      "\nYour output: " + sOutput.length + " lines");
              }
      
              for (int i = 0; i < stations.length; i++) {
                  if (i == 0 && !stations[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                      return CheckResult.wrong("The first station in the output should be " + stations[i]);
                  } else if (i != 0) {
                      if (!stations[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                          return CheckResult.wrong("After '" + stations[i - 1] + "' should be '" + stations[i] + "'.");
                      }
                  }
              }
              return CheckResult.correct();
          }
      
          // checks for "depot" at the start and at the end
          void checkDepots(String output) {
              output = output.trim().toLowerCase();
              if (!output.startsWith("depot")) {
                  throw new WrongAnswer("Your output should start with 'depot'.");
              } else if (!output.endsWith("depot")) {
                  throw new WrongAnswer("Your output should end with 'depot'.");
              }
          }
      
          // checks number of stations in output
          void checkOutputLength(String output, int correctLength) {
              int length = output.trim().split("\n").length;
              if (length != correctLength) {
                  throw new WrongAnswer("You output contains wrong number of lines.\n" +
                      "Expected: " + correctLength + " lines\n" +
                      "Your output: " + length + " lines");
              }
          }
      
          // checks stations
          void assertStations(String output, String[] stations) {
      
              String[] sOutput = output.trim().split("\n");
      
              for (int i = 0; i < stations.length; i++) {
                  if (!sOutput[i + 1].equals(stations[i])) {
                      throw new WrongAnswer("Can't find station '" + stations[i] + "' in the line number " + (i + 2));
                  }
              }
          }
      
          void assertWithTransfer(String output, String[][] stations) {
      
              String[] sOutput = output.split("\n");
      
              for (int i = 0; i < stations.length; i++) {
                  String currentLine = sOutput[i + 1].toLowerCase().trim();
                  String currentStation = stations[i][0];
                  String currentTransfer = stations[i][1];
                  if (currentTransfer == null) {
                      if (!currentLine.equals(currentStation.toLowerCase())) {
                          throw new WrongAnswer("There is an error in your program's reply. Some stations were not found.");
                      }
                  } else if (!currentLine.contains(currentStation.toLowerCase()) ||
                      !currentLine.contains(currentTransfer.toLowerCase())) {
                      throw new WrongAnswer("Expected transfer to '" + currentTransfer + "' from '" + currentStation + "' station.");
                  }
              }
          }
      }
    learner_created: false
  - name: src/metro/Line.java
    visible: true
    text: |
      package metro;
      
      
      public class Line {
          private final String name;
          private Station firstDepot;
          private Station lastDepot;
          private Station firstStation;
          private Station lastStation;
      
          Line(String name) {
              this.name = name;
              this.firstDepot = new Station("depot", name, Integer.MIN_VALUE);
              this.lastDepot = new Station("depot", name, Integer.MAX_VALUE);
          }
      
          public String getName() {
              return name;
          }
      
          public void addStation(Station station) {
              if (firstStation == null) {
                  this.firstStation = station;
                  this.lastStation = station;
              } else if (firstStation.getOrder() > station.getOrder()) {
                  firstStation.addHeadStation(station);
                  firstStation = station;
              } else {
                  Station iter = firstStation;
                  while (iter.getOrder() < station.getOrder() && iter.getNext() != null) {
                      iter = iter.getNext();
                  }
      
                  if (iter.getOrder() != station.getOrder()) {
                      if (iter.getNext() == null) {
                          lastStation = station;
                      }
      
                      iter.addTailStation(station);
                  }
      
              }
          }
      
          public void addHeadStation(String stationName) {
              Station station = new Station(stationName, this.name, Integer.MIN_VALUE);
              firstStation.addHeadStation(station);
              firstStation = station;
          }
      
          public void addTailStation(String stationName) {
              Station station = new Station(stationName, this.name, Integer.MAX_VALUE);
              lastStation.addTailStation(station);
              lastStation = station;
          }
      
          public void removeStation(String stationName) {
              Station station = firstStation;
              boolean isFinish = false;
      
              while (station != null && !isFinish) {
                  if (station.getName().equals(stationName)) {
                      if (station == firstStation) {
                          firstStation = station.getNext();
                      } else if (station == lastStation) {
                          lastStation = station.getPrev();
                      }
      
                      station.remove();
                      isFinish = true;
                  }
              }
          }
      
          public void printLine() {
      
              Station station = null;
      
              if (this.firstDepot != null && this.lastStation != null) {
                  this.firstDepot.setNext(this.firstStation);
                  this.lastStation.setNext(this.lastDepot);
      
                  station = this.firstDepot;
              } else {
                  System.out.println("depot");
              }
      
      
      
              while (station != null) {
                  station.printStation();
                  station = station.getNext();
      
              }
      
              if (this.firstDepot != null && this.lastStation != null) {
                  this.firstDepot.setNext(null);
                  this.lastStation.setNext(null);
              }
          }
      
          public Station getStationInLine(String stationName) {
              Station station = this.firstStation;
      
              while (station != null) {
                  if (station.getName().equals(stationName)) {
                      return station;
                  }
      
                  station = station.getNext();
              }
      
              return null;
          }
      
      
      }
    learner_created: true
  - name: src/metro/MetroMap.java
    visible: true
    text: |
      package metro;
      
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Map;
      
      public class MetroMap {
      
          private  List<Line> lines;
      
          MetroMap() {
              lines = new ArrayList<>();
          }
      
          public Line getSafeLine(String lineName) {
              Line line = this.getLine(lineName);
              if (line == null) {
                  line = this.addLine(lineName);
              }
              return line;
          }
      
          private Line getLine(String lineName) {
              for (Line line : lines) {
                  if (lineName.equals(line.getName())) {
                      return line;
                  }
              }
      
              return null;
          }
      
          public Line addLine(String lineName) {
              Line line = new Line(lineName);
              this.lines.add(line);
              return line;
          }
          public void buildConnection(Map<Station, List<String>> mapStationTransfer) {
              for (Station station : mapStationTransfer.keySet()) {
                  List<String> values = mapStationTransfer.get(station);
                  for (String value : values) {
                      String[] lineAndStation = value.split("\\|");
                      this.getSafeLine(lineAndStation[1]).getStationInLine(lineAndStation[0]).connectStation(station);
                  }
      
              }
          }
      
          public void buildConnection(String lineName1, String stationName1, String lineName2, String stationName2) {
              this.getSafeLine(lineName1).getStationInLine(stationName1).connectStation(this.getSafeLine(lineName2).getStationInLine(stationName2));
          }
      
          public boolean isEmpty() {
              return lines.isEmpty();
          }
      }
    learner_created: true
  - name: src/metro/Station.java
    visible: true
    text: |
      package metro;
      
      import java.util.ArrayList;
      import java.util.List;
      
      public class Station {
      
          private Station prev = null;
          private Station next = null;
          private final String name;
          private final String lineName;
          private final int order;
      
          private List<Station> transferStations;
      
          Station(String name, String lineName, int order) {
              this.lineName = lineName;
              this.name = name;
              this.order = order;
              this.transferStations = new ArrayList<>();
          }
      
          public String getName() {
              return name;
          }
      
          public String getLineName() {
              return lineName;
          }
      
          public int getOrder() {
              return order;
          }
      
          public void setNext(Station next) {
              this.next = next;
          }
      
          public void setPrev(Station prev) {
              this.prev = prev;
          }
      
          public Station getNext() {
              return next;
          }
      
          public Station getPrev() {
              return prev;
          }
      
          public void addTailStation(Station station) {
              station.setNext(this.next);
              this.next = station;
              station.setPrev(this);
      
              if (station.getNext() != null) {
                  station.getNext().setPrev(station);
              }
          }
      
          public void addHeadStation(Station station) {
              this.prev = station;
              station.setNext(this);
          }
      
          public void remove() {
              if (this.prev != null) {
                  this.prev.setNext(this.next);
              }
      
              if (this.next != null) {
                  this.next.setPrev(this.prev);
              }
          }
      
          private boolean isConnectedStation(Station newStation) {
              for (Station station : this.transferStations) {
                  if (station == newStation) {
                      return true;
                  }
              }
      
              return false;
          }
      
          public void connectStation(Station station) {
              if (this.isConnectedStation(station)) {
                  return;
              }
      
              this.transferStations.add(station);
              station.connectStation(this);
          }
      
          public void printStation() {
              System.out.print(this.getName());
      
              for (Station station : this.transferStations) {
                  System.out.printf(" - %s (%s line)", station.getName(), station.getLineName());
              }
      
              System.out.println();
          }
      
      
      
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/10344#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 15 Dec 2023 14:34:03 UTC"
record: 4
